<script>
import {
    TrashIcon,
    PencilIcon
} from '@/Components/Icons/hero'
import UpHeading from '@/Components/Tables/TableUI/UpHeading.vue';
import Heading from '@/Components/Tables/TableUI/Heading.vue';
import TableRow from '@/Components/Tables/TableUI/TableRow.vue';
import CellCheckbox from '@/Components/Tables/TableUI/CellCheckbox.vue';
import Paginator from '@/Components/OtherUI/Paginator'
import InputField from '@/Components/Fields/InputField'
export default {
    components: {
        TrashIcon,
        PencilIcon,
        UpHeading,
        Heading,
        TableRow,
        CellCheckbox, Paginator, InputField,
    },
    mounted() {

        this.headings.forEach(el => {
            this.showHeadings.push(el.key)
        })
        if (window.localStorage['{{modelPl}}electedRows']) {
            this.selectedRows = JSON.parse(window.localStorage['{{modelPl}}electedRows']);
        }
        this.setData()
    },

    methods: {
        searchAction() {
            this.setData()
        },
        setSearch(d) {
            this.search = d.value
        },
        deleteItem(data) {

            axios.delete('/api/{{modelPl}}/' + data, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': this.$page.props.csrf,
                    'Authorization': 'Bearer ' + this.$page.props.user.token,
                },
                id: data,
            }

            )
                .then(response => {
                    window.notify('Deleted ')
                    this.setData()
                })
                .catch(error => {
                });
        },
        async setData() {
            var data = { perPage: this.per_page, page: this.page };
            if (this.search.trim().length > 0) {
                data['search'] = this.search
            }
            var url = new URL(
                window.location.protocol +
                window.location.host +
                '/api/admin/{{modelPl}}'
            );
            for (let k in data) {
                url.searchParams.append(k, data[k]);
            }
            const rawResponse = await fetch(url, {
                method: 'get',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': this.$page.props.csrf,
                    'Authorization': 'Bearer ' + this.$page.props.user.token,
                },

            });
            const content = await rawResponse.json();

            this.{ { modelPl } } = content.data
            if (this.{ { modelPl } }.length == 0) {
    window.notify('Nothing found,Sorry', 'info')
}
this.lastPage = content.meta.last_page
this.page = content.meta.current_page
                
            },
getObjectKey(value, o) {

    let returnValue = ''
    Object.keys(o).forEach(el => {

        if (o[el] == value) {

            returnValue = el

        }
    })
    return returnValue

},
toggleColumn(key) {
    alert(key)
    // Note: All td must have the same class name as the headings key! 
    let columns = document.querySelectorAll('.' + key);
    // console.log(this.$refs[key].classList.contains('hidden'));
    // console.log(this.$refs[key].classList);

    // if (this.$refs[key].classList.contains('hidden')) {
    if (columns[0].classList.contains('hidden')) {
        columns.forEach(column => {
            column.classList.remove('hidden');

        });
    } else {
        columns.forEach(column => {


            column.classList.add('hidden');
        });
    }
},

getRowDetail($event, id) {
    let rows = this.selectedRows;

    if (rows.includes(id)) {
        let index = rows.indexOf(id);
        rows.splice(index, 1);
    } else {
        rows.push(id);
    }
},

selectAllCheckbox($event) {
    let columns = document.querySelectorAll('.rowCheckbox');

    this.selectedRows = [];

    if ($event.target.checked == true) {
        columns.forEach(column => {
            column.checked = true
            this.selectedRows.push(parseInt(column.name))
        });
    } else {
        columns.forEach(column => {
            column.checked = false
        });
        this.selectedRows = [];
    }
},
nextPaginate() {
    if (this.lastPage > this.page) {
        this.page = this.page + 1
        this.setData()
        return
    }
    window.notify('this is the last page', 'info')

    // this.updateWindowUrl()
},
prevPaginate() {
    if (this.page > 1) {
        this.page = -1
        this.setData()
        return
    }
    window.notify('this is the last page', 'info')

},
        },
watch: {

    showHeadings(n) {

        window.localStorage['{{modelPl}}electedRows'] = JSON.stringify(this.selectedRows)
    }
},
data() {
    return {



        headings: [
            {{ tableHeadingItems }}
					],
    { { modelPl } }: [],
        selectedRows: [],
            showHeadings: [],

                search: '',
                    open: false,
                        per_page: 10,
                            page: 1,
                                lastPage: null,


            }
        },
    }
</script>


<template>


    <AdminLayout>


        <template v-slot:content>
            <div class=" container bg-white rounded-md shadow-md dark:bg-dark-eval-1 antialiased sans-serif
            px-4 mb-5
            ">
                <h1 class="text-3xl  border-b mb-3">{{ modelPl }}</h1>
                <InputField class="" action='Search' @btnClicked='searchAction' @inputChanged='setSearch' />
                <!-- table start  -->
                <up-heading :headings='headings' />
                <!-- heading  -->

                <div class="overflow-x-auto bg-white rounded-lg shadow overflow-y-auto relative">
                    <table class="border-collapse table-auto w-full whitespace-no-wrap bg-white table-striped relative">
                        <heading :headings='headings' />
                        <tbody>

                            <table-row v-for="item in { { modelPl } }" :item='item' :key="item.id" :headings='headings'
                                @deleteItem='deleteItem'>
                                <template v-slot:checkbox>
                                    <cell-checkbox :item="item" />
                                </template>

                            </table-row>

                        </tbody>
                    </table>
                    <Paginator @prev='prevPaginate' @next='nextPaginate' />
                    <p class="text-gray-500 leading-3">
                        Pages
                        {{ page }}/{{ lastPage }}
                    </p>
                </div>
            </div>



        </template>

    </AdminLayout>
</template>
